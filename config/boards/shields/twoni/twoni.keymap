/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// build
// west build -p -b nice_nano -- -DSHIELD=twoni_left
// west build -d build/right -b nice_nano -- -DSHIELD=twoni_right

/ {
        combos {
		compatible = "zmk,combos";
		combo_del {
		    timeout-ms = <40>;
		    key-positions = <10 11>;	// p backspace
		    bindings = <&kp DEL>;
		};
		combo_esc {
		    timeout-ms = <40>;
		    key-positions = <1 2>;		// q w
		    bindings = <&kp ESC>;
		};
		combo_slash {
			timeout-ms = <50>;
		    key-positions = <32 33>;	// , .
		    bindings = <&kp FSLH>;
		};		
		combo_question_mark {
			timeout-ms = <50>;
		    key-positions = <33 34>;	// . UP
		    bindings = <&kp QMARK>;
		};
		combo_gui {
			timeout-ms = <50>;
		    key-positions = <37 38>;	// 
		    bindings = <&kp LGUI>;
		};                
		combo_paren_left {
			timeout-ms = <40>;
		    key-positions = <15 16>;	// d f 
		    bindings = <&kp LPAR>;
		};		
		combo_paren_right {
			timeout-ms = <40>;
		    key-positions = <19 20>;	// j k 
		    bindings = <&kp RPAR>;
		};
		combo_curly_left {
			timeout-ms = <40>;
		    key-positions = <14 15>;	// s d 
		    bindings = <&kp LBRC>;
		};
		combo_curly_right {
			timeout-ms = <40>;
		    key-positions = <20 21>;	// k l
		    bindings = <&kp RBRC>;
		};
		combo_square_left {
			timeout-ms = <40>;
		    key-positions = <15 28>;	// d v 
		    bindings = <&kp LBKT>;
		};
		combo_square_right {
			timeout-ms = <40>;
		    key-positions = <20 31>;	// m k
		    bindings = <&kp RBKT>;
		};	
		combo_toggle {
			timeout-ms = <40>;
		    key-positions = <14 15 37>;	// s d ctrl 
		    bindings = <&tog 4>;
		};	
	};
	
	behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            };
		ftab: f_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "F_TAB";
            #binding-cells = <0>;
            bindings = <&kp F>, <&kp TAB>;
            mods = <MOD_LALT>;
        };
		stab: s_shift_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "S_TAB";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp LS(TAB)>;
            mods = <MOD_LALT>;
        };
		am_f: alpha_mod_f_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "F_MT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&ftab>;
        };
	};
	
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |                |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |                |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |                |  N  |  M   |  ,  |  .  |  /  | SHFT |
//                          | GUI | LWR | ENT |    | SPC | RSE  | ALT |
                        bindings = <
   &kp ESC      &kp Q   &kp W   	&kp E   		&kp R 			&kp T           &kp Y   &kp U           &kp I     		&kp O   &kp P         &kp BSPC
   &lt 2 TAB    &kp A   &kp S		&hm LALT D 		&am_f LSHFT F 	&kp G           &kp H   &hm LSHFT J     &kp K     		&kp L   &kp SEMI      &kp SQT
   &kp LSHFT    &kp Z   &kp X   	&kp C   		&kp V 			&kp B           &kp N   &kp M           &kp COMMA 		&kp DOT &kp FSLH      &kp RET
                                &kp LALT &kp LCTRL &mo 1        				&kp SPACE &lt 2 SPACE &lt 3 SPACE
                        >;
                };
                lower_layer {
                        bindings = <
        &kp C_PP	&kp LS(N1) 	&kp LS(N2) 	&kp LS(N3) 	&kp LS(N4) 		&kp LS(N5) 	&kp LS(N6) 	&kp LS(N7) 	&kp LS(N8) 	&kp LS(N9) 	&kp LS(N0) 	&kp DEL
        &mo 3		&kp F1 		&kp F2 		&kp F3 		&kp F4 			&kp F5  	&kp F6 	 	&kp HOME 	&kp END 	&kp PG_UP	&kp PG_DN	&kp PIPE
        &trans		&kp F7 		&kp F8 		&kp F9 		&kp LC(LS(M))	&kp F11 	&kp F12 	&kp FSLH 	&trans	 	&trans  	&trans  	&trans
                                &kp LALT &kp LCTRL &mo 1        &kp SPACE &lt 2 SPACE &lt 3 SPACE
                        >;
                };

                raise_layer {
                        bindings = <
	&kp ESC 	&kp GRAVE 	&kp UP	 	&kp TILDE	&kp LA(F4) 				&kp BSLH 		&kp N0 		&kp N1 			&kp N2 		&kp N3 		&kp PLUS 	&kp DEL
	&trans		&kp LEFT 	&kp DOWN  	&kp RIGHT 	&hm LSHFT C_VOL_DN  	&kp C_VOL_UP 	&kp EQUAL 	&hm LSHFT N4 	&kp N5 		&kp N6 		&kp MINUS 	&kp LT
	&trans 		&kp C_PREV 	&kp C_PP 	&kp C_NEXT 	&kp BSPC 	 			&kp FSLH		&kp UNDER 	&kp N7 			&kp N8 		&kp N9 		&kp DOT 	&kp COMMA
                                &kp LALT &kp LCTRL &mo 1        &kp SPACE &lt 2 SPACE &lt 3 SPACE
                        >;
                };
	
                function_layer {
                        bindings = <
	&reset 	&bootloader 	&kp UP		&kp LA(F4)	&bt BT_SEL 0 	    	&bt BT_CLR 		&reset		&bt BT_SEL 0     &kp UP 		&kp C_BRI_DN 	&kp C_BRI_UP 	&trans
	&trans 	&kp LEFT 		&kp DOWN 	&kp RIGHT	&hm LSHFT C_VOL_DN  	&kp C_VOL_UP 	&trans      &kp LEFT 	&kp DOWN 	&kp RIGHT 		&trans 	        &trans
	&trans 	&kp C_PREV 		&kp C_PP 	&kp C_NEXT 	&bt BT_CLR 	    		&trans 			&trans		&trans 		&trans 		&trans 	        &trans 	        &kp LC(RET)
                                &kp LALT &kp LCTRL &mo 1        &kp SPACE &lt 2 SPACE &lt 3 SPACE
                        >;
                };

				nav_layer {
                        bindings = <
	&kp ESC 	&kp GRAVE 	&kp UP	 	&kp TILDE	&kp LA(F4) 				&tog 4 			&tog 4    		&none      &kp UP 		&kp C_BRI_DN 	&kp C_BRI_UP 	&kp BSPC
	&lt 2 TAB	&kp LEFT 	&kp DOWN  	&kp RIGHT 	&hm LSHFT C_VOL_DN  	&kp C_VOL_UP 	&none          &kp LEFT 	&kp DOWN 	&kp RIGHT 		&none			&none
	&kp LSHFT 	&kp C_PREV 	&kp C_PP 	&kp C_NEXT 	&kp BSPC 	 			&kp FSLH		&none			&none 		&none			&none 	     &none 	        &kp RET
                                &kp LALT &kp LCTRL &mo 1        &kp SPACE &lt 2 SPACE &lt 3 SPACE
                        >;
                };      
        };
};